{
    "type": "input", 
    "label": "Text", 
    "tagName": "Q-INPUT", 
    "category": "Forms", 
    "content": "<q-input />", 
    "media": "images/icons/components/ui_components/input_text_field.png", 
    "traits": [
  {
    "label": "Reactive Model",
    "name": "v-model",
    "type": "select",
    "options": []
  },
  {
    "label": "name",
    "name": ":name",
    "type": "String",
    "desc": "Used to specify the name of the control; Useful if dealing with forms; If not specified, it takes the value of 'for' prop, if it exists",
    "category": "behavior",
    "examples": [
      "car_id",
      "car_id"
    ],
    "enabled": true
  },
  {
    "label": "mask",
    "name": ":mask",
    "type": "String",
    "desc": "Custom mask or one of the predefined mask names",
    "category": "behavior",
    "examples": [
      "###-##",
      "date",
      "datetime",
      "time",
      "fulltime",
      "phone",
      "card"
    ],
    "enabled": true
  },
  {
    "label": "fill-mask",
    "name": ":fill-mask",
    "type": [
      "Boolean",
      "String"
    ],
    "desc": "Fills string with specified characters (or underscore if value is not string) to fill mask's length",
    "category": "behavior",
    "examples": [
      "true",
      "'0'",
      "'_'"
    ],
    "enabled": true
  },
  {
    "label": "reverse-fill-mask",
    "name": ":reverse-fill-mask",
    "type": "Boolean",
    "desc": "Fills string from the right side of the mask",
    "category": "behavior",
    "enabled": true
  },
  {
    "label": "unmasked-value",
    "name": ":unmasked-value",
    "type": "Boolean",
    "desc": "Model will be unmasked (won't contain tokens/separation characters)",
    "category": "behavior",
    "enabled": true
  },
  {
    "label": "model-value",
    "name": ":model-value",
    "type": [
      "String",
      "Number",
      "null",
      "undefined"
    ],
    "desc": "Model of the component; Either use this property (along with a listener for 'update:modelValue' event) OR use v-model directive",
    "category": "model",
    "examples": [
      "v-model=\"myText\""
    ],
    "enabled": true
  },
  {
    "label": "error",
    "name": ":error",
    "type": "Boolean",
    "desc": "Does field have validation errors?",
    "category": "behavior",
    "enabled": true
  },
  {
    "label": "error-message",
    "name": ":error-message",
    "type": "String",
    "desc": "Validation error message (gets displayed only if 'error' is set to 'true')",
    "category": "content",
    "examples": [
      "Username must have at least 5 characters"
    ],
    "enabled": true
  },
  {
    "label": "no-error-icon",
    "name": ":no-error-icon",
    "type": "Boolean",
    "desc": "Hide error icon when there is an error",
    "category": "content",
    "enabled": true
  },
  {
    "label": "rules",
    "name": ":rules",
    "type": "Array",
    "desc": "Array of Functions/Strings; If String, then it must be a name of one of the embedded validation rules",
    "category": "behavior",
    "examples": [
      ":rules=\"[ val => val.length <= 3 || 'Please use maximum 3 characters' ]\"",
      ":rules=\"[ 'fulltime' ]\""
    ],
    "enabled": true
  },
  {
    "label": "reactive-rules",
    "name": ":reactive-rules",
    "type": "Boolean",
    "desc": "By default a change in the rules does not trigger a new validation until the model changes; If set to true then a change in the rules will trigger a validation; Has a performance penalty, so use it only when you really need it",
    "category": "behavior",
    "enabled": true
  },
  {
    "label": "lazy-rules",
    "name": ":lazy-rules",
    "type": [
      "Boolean",
      "String"
    ],
    "desc": "If set to boolean true then it checks validation status against the 'rules' only after field loses focus for first time; If set to 'ondemand' then it will trigger only when component's validate() method is manually called or when the wrapper QForm submits itself",
    "category": "behavior",
    "enabled": true
  },
  {
    "label": "label",
    "name": ":label",
    "type": "String",
    "desc": "A text label that will “float” up above the input field, once the field gets focus",
    "category": "content",
    "examples": [
      "Username"
    ],
    "enabled": true
  },
  {
    "label": "stack-label",
    "name": ":stack-label",
    "type": "Boolean",
    "desc": "Label will be always shown above the field regardless of field content (if any)",
    "category": "content",
    "enabled": true
  },
  {
    "label": "hint",
    "name": ":hint",
    "type": "String",
    "desc": "Helper (hint) text which gets placed below your wrapped form component",
    "category": "content",
    "examples": [
      "Fill in between 3 and 12 characters"
    ],
    "enabled": true
  },
  {
    "label": "hide-hint",
    "name": ":hide-hint",
    "type": "Boolean",
    "desc": "Hide the helper (hint) text when field doesn't have focus",
    "category": "content",
    "enabled": true
  },
  {
    "label": "prefix",
    "name": ":prefix",
    "type": "String",
    "desc": "Prefix",
    "category": "content",
    "examples": [
      "$"
    ],
    "enabled": true
  },
  {
    "label": "suffix",
    "name": ":suffix",
    "type": "String",
    "desc": "Suffix",
    "category": "content",
    "examples": [
      "@gmail.com"
    ],
    "enabled": true
  },
  {
    "label": "label-color",
    "name": ":label-color",
    "type": "String",
    "desc": "Color name for the label from the Quasar Color Palette; Overrides the 'color' prop; The difference from 'color' prop is that the label will always have this color, even when field is not focused",
    "category": "style",
    "examples": [
      "primary",
      "teal-10"
    ],
    "enabled": true
  },
  {
    "label": "color",
    "name": ":color",
    "type": "String",
    "desc": "Color name for component from the Quasar Color Palette",
    "category": "style",
    "examples": [
      "primary",
      "teal-10"
    ],
    "enabled": true
  },
  {
    "label": "bg-color",
    "name": ":bg-color",
    "type": "String",
    "desc": "Color name for component from the Quasar Color Palette",
    "category": "style",
    "examples": [
      "primary",
      "teal-10"
    ],
    "enabled": true
  },
  {
    "label": "dark",
    "name": ":dark",
    "type": "Boolean",
    "desc": "Notify the component that the background is a dark color",
    "category": "style",
    "enabled": true
  },
  {
    "label": "loading",
    "name": ":loading",
    "type": "Boolean",
    "desc": "Signals the user a process is in progress by displaying a spinner; Spinner can be customized by using the 'loading' slot.",
    "category": "behavior|content",
    "enabled": true
  },
  {
    "label": "clearable",
    "name": ":clearable",
    "type": "Boolean",
    "desc": "Appends clearable icon when a value (not undefined or null) is set; When clicked, model becomes null",
    "category": "behavior|content",
    "enabled": true
  },
  {
    "label": "clear-icon",
    "name": ":clear-icon",
    "type": "String",
    "desc": "Custom icon to use for the clear button when using along with 'clearable' prop",
    "category": "content",
    "examples": [
      "close"
    ],
    "enabled": true
  },
  {
    "label": "filled",
    "name": ":filled",
    "type": "Boolean",
    "desc": "Use 'filled' design for the field",
    "category": "style",
    "enabled": true
  },
  {
    "label": "outlined",
    "name": ":outlined",
    "type": "Boolean",
    "desc": "Use 'outlined' design for the field",
    "category": "style",
    "enabled": true
  },
  {
    "label": "borderless",
    "name": ":borderless",
    "type": "Boolean",
    "desc": "Use 'borderless' design for the field",
    "category": "style",
    "enabled": true
  },
  {
    "label": "standout",
    "name": ":standout",
    "type": [
      "Boolean",
      "String"
    ],
    "desc": "Use 'standout' design for the field; Specifies classes to be applied when focused (overriding default ones)",
    "category": "style",
    "examples": [
      "standout",
      "standout=\"bg-primary text-white\""
    ],
    "enabled": true
  },
  {
    "label": "label-slot",
    "name": ":label-slot",
    "type": "Boolean",
    "desc": "Enables label slot; You need to set it to force use of the 'label' slot if the 'label' prop is not set",
    "category": "content",
    "enabled": true
  },
  {
    "label": "bottom-slots",
    "name": ":bottom-slots",
    "type": "Boolean",
    "desc": "Enables bottom slots ('error', 'hint', 'counter')",
    "category": "content",
    "enabled": true
  },
  {
    "label": "hide-bottom-space",
    "name": ":hide-bottom-space",
    "type": "Boolean",
    "desc": "Do not reserve space for hint/error/counter anymore when these are not used; As a result, it also disables the animation for those; It also allows the hint/error area to stretch vertically based on its content",
    "category": "style",
    "enabled": true
  },
  {
    "label": "counter",
    "name": ":counter",
    "type": "Boolean",
    "desc": "Show an automatic counter on bottom right",
    "category": "content",
    "enabled": true
  },
  {
    "label": "rounded",
    "name": ":rounded",
    "type": "Boolean",
    "desc": "Applies a small standard border-radius for a squared shape of the component",
    "category": "style",
    "enabled": true
  },
  {
    "label": "square",
    "name": ":square",
    "type": "Boolean",
    "desc": "Remove border-radius so borders are squared; Overrides 'rounded' prop",
    "category": "style",
    "enabled": true
  },
  {
    "label": "dense",
    "name": ":dense",
    "type": "Boolean",
    "desc": "Dense mode; occupies less space",
    "category": "style",
    "enabled": true
  },
  {
    "label": "item-aligned",
    "name": ":item-aligned",
    "type": "Boolean",
    "desc": "Match inner content alignment to that of QItem",
    "category": "style",
    "enabled": true
  },
  {
    "label": "disable",
    "name": ":disable",
    "type": "Boolean",
    "desc": "Put component in disabled mode",
    "category": "state",
    "enabled": true
  },
  {
    "label": "readonly",
    "name": ":readonly",
    "type": "Boolean",
    "desc": "Put component in readonly mode",
    "category": "state",
    "enabled": true
  },
  {
    "label": "autofocus",
    "name": ":autofocus",
    "type": "Boolean",
    "desc": "Focus field on initial component render",
    "category": "behavior",
    "enabled": true
  },
  {
    "label": "for",
    "name": ":for",
    "type": "String",
    "desc": "Used to specify the 'id' of the control and also the 'for' attribute of the label that wraps it; If no 'name' prop is specified, then it is used for this attribute as well",
    "category": "behavior",
    "examples": [
      "myFieldsId"
    ],
    "enabled": true
  },
  {
    "label": "shadow-text",
    "name": ":shadow-text",
    "type": "String",
    "desc": "Text to be displayed as shadow at the end of the text in the control; Does NOT applies to type=file",
    "category": "content",
    "examples": [
      "rest of the fill value"
    ],
    "enabled": true
  },
  {
    "label": "type",
    "name": ":type",
    "type": "String",
    "desc": "Input type",
    "category": "general",
    "examples": [
      "password"
    ],
    "enabled": true
  },
  {
    "label": "debounce",
    "name": ":debounce",
    "type": [
      "String",
      "Number"
    ],
    "desc": "Debounce amount (in milliseconds) when updating model",
    "category": "model",
    "examples": [
      "0",
      "530"
    ],
    "enabled": true
  },
  {
    "label": "maxlength",
    "name": ":maxlength",
    "type": [
      "String",
      "Number"
    ],
    "desc": "Specify a max length of model",
    "category": "model",
    "examples": [
      "12"
    ],
    "enabled": true
  },
  {
    "label": "autogrow",
    "name": ":autogrow",
    "type": "Boolean",
    "desc": "Make field autogrow along with its content (uses a textarea)",
    "category": "content",
    "enabled": true
  },
  {
    "label": "input-class",
    "name": ":input-class",
    "type": [
      "String",
      "Array",
      "Object"
    ],
    "desc": "Class definitions to be attributed to the underlying input tag",
    "category": "style",
    "examples": [
      "my-special-class",
      ":input-class=\"{ 'my-special-class': <condition> }\""
    ],
    "enabled": true
  },
  {
    "label": "input-style",
    "name": ":input-style",
    "type": [
      "String",
      "Array",
      "Object"
    ],
    "desc": "Style definitions to be attributed to the underlying input tag",
    "category": "style",
    "examples": [
      "background-color: #ff0000",
      ":input-style=\"{ backgroundColor: '#ff0000' }\""
    ],
    "enabled": true
  }
]
}