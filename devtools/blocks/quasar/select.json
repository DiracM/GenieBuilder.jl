{
    "type": "select", 
    "label": "Select", 
    "tagName": "Q-SELECT", 
    "category": "Forms", 
    "content": "<q-select />", 
    "media": "images/icons/components/ui_components/select.png", 
    "traits": [
  {
    "label": "Reactive Model",
    "name": "v-model",
    "type": "select",
    "options": []
  },
  {
    "label": "name",
    "name": ":name",
    "type": "String",
    "desc": "Used to specify the name of the control; Useful if dealing with forms; If not specified, it takes the value of 'for' prop, if it exists",
    "category": "behavior",
    "examples": [
      "car_id",
      "car_id"
    ],
    "enabled": true
  },
  {
    "label": "virtual-scroll-horizontal",
    "name": ":virtual-scroll-horizontal",
    "type": "Boolean",
    "desc": "Make virtual list work in horizontal mode",
    "category": "behavior",
    "enabled": true
  },
  {
    "label": "virtual-scroll-slice-size",
    "name": ":virtual-scroll-slice-size",
    "type": [
      "Number",
      "String"
    ],
    "desc": "Minimum number of items to render in the virtual list",
    "category": "virtual-scroll",
    "examples": [
      "virtual-scroll-slice-size=\"60\""
    ],
    "enabled": true
  },
  {
    "label": "virtual-scroll-slice-ratio-before",
    "name": ":virtual-scroll-slice-ratio-before",
    "type": [
      "Number",
      "String"
    ],
    "desc": "Ratio of number of items in visible zone to render before it",
    "category": "virtual-scroll",
    "examples": [
      "virtual-scroll-slice-ratio-before=\"0.3\""
    ],
    "enabled": true
  },
  {
    "label": "virtual-scroll-slice-ratio-after",
    "name": ":virtual-scroll-slice-ratio-after",
    "type": [
      "Number",
      "String"
    ],
    "desc": "Ratio of number of items in visible zone to render after it",
    "category": "virtual-scroll",
    "examples": [
      "virtual-scroll-slice-ratio-after=\"2\""
    ],
    "enabled": true
  },
  {
    "label": "virtual-scroll-item-size",
    "name": ":virtual-scroll-item-size",
    "type": [
      "Number",
      "String"
    ],
    "desc": "Default size in pixels (height if vertical, width if horizontal) of an item; This value is used for rendering the initial list; Try to use a value close to the minimum size of an item",
    "category": "virtual-scroll",
    "examples": [
      "virtual-scroll-item-size=\"48\""
    ],
    "enabled": true
  },
  {
    "label": "virtual-scroll-sticky-size-start",
    "name": ":virtual-scroll-sticky-size-start",
    "type": [
      "Number",
      "String"
    ],
    "desc": "Size in pixels (height if vertical, width if horizontal) of the sticky part (if using one) at the start of the list; A correct value will improve scroll precision",
    "category": "virtual-scroll",
    "examples": [
      "virtual-scroll-sticky-size-start=\"48\""
    ],
    "enabled": true
  },
  {
    "label": "virtual-scroll-sticky-size-end",
    "name": ":virtual-scroll-sticky-size-end",
    "type": [
      "Number",
      "String"
    ],
    "desc": "Size in pixels (height if vertical, width if horizontal) of the sticky part (if using one) at the end of the list; A correct value will improve scroll precision",
    "category": "virtual-scroll",
    "examples": [
      "virtual-scroll-sticky-size-end=\"48\""
    ],
    "enabled": true
  },
  {
    "label": "table-colspan",
    "name": ":table-colspan",
    "type": [
      "Number",
      "String"
    ],
    "desc": "The number of columns in the table (you need this if you use table-layout: fixed)",
    "category": "virtual-scroll|content",
    "examples": [
      "table-colspan=\"12\""
    ],
    "enabled": true
  },
  {
    "label": "model-value",
    "name": ":model-value",
    "type": "Any",
    "desc": "Model of the component; Must be Array if using 'multiple' prop; Either use this property (along with a listener for 'update:modelValue' event) OR use v-model directive",
    "category": "model",
    "examples": [
      "v-model=\"myModel\""
    ],
    "enabled": true
  },
  {
    "label": "error",
    "name": ":error",
    "type": "Boolean",
    "desc": "Does field have validation errors?",
    "category": "behavior",
    "enabled": true
  },
  {
    "label": "error-message",
    "name": ":error-message",
    "type": "String",
    "desc": "Validation error message (gets displayed only if 'error' is set to 'true')",
    "category": "content",
    "examples": [
      "Username must have at least 5 characters"
    ],
    "enabled": true
  },
  {
    "label": "no-error-icon",
    "name": ":no-error-icon",
    "type": "Boolean",
    "desc": "Hide error icon when there is an error",
    "category": "content",
    "enabled": true
  },
  {
    "label": "rules",
    "name": ":rules",
    "type": "Array",
    "desc": "Array of Functions/Strings; If String, then it must be a name of one of the embedded validation rules",
    "category": "behavior",
    "examples": [
      ":rules=\"[ val => val.length <= 3 || 'Please use maximum 3 characters' ]\"",
      ":rules=\"[ 'fulltime' ]\""
    ],
    "enabled": true
  },
  {
    "label": "reactive-rules",
    "name": ":reactive-rules",
    "type": "Boolean",
    "desc": "By default a change in the rules does not trigger a new validation until the model changes; If set to true then a change in the rules will trigger a validation; Has a performance penalty, so use it only when you really need it",
    "category": "behavior",
    "enabled": true
  },
  {
    "label": "lazy-rules",
    "name": ":lazy-rules",
    "type": [
      "Boolean",
      "String"
    ],
    "desc": "If set to boolean true then it checks validation status against the 'rules' only after field loses focus for first time; If set to 'ondemand' then it will trigger only when component's validate() method is manually called or when the wrapper QForm submits itself",
    "category": "behavior",
    "enabled": true
  },
  {
    "label": "label",
    "name": ":label",
    "type": "String",
    "desc": "A text label that will “float” up above the input field, once the field gets focus",
    "category": "content",
    "examples": [
      "Username"
    ],
    "enabled": true
  },
  {
    "label": "stack-label",
    "name": ":stack-label",
    "type": "Boolean",
    "desc": "Label will be always shown above the field regardless of field content (if any)",
    "category": "content",
    "enabled": true
  },
  {
    "label": "hint",
    "name": ":hint",
    "type": "String",
    "desc": "Helper (hint) text which gets placed below your wrapped form component",
    "category": "content",
    "examples": [
      "Fill in between 3 and 12 characters"
    ],
    "enabled": true
  },
  {
    "label": "hide-hint",
    "name": ":hide-hint",
    "type": "Boolean",
    "desc": "Hide the helper (hint) text when field doesn't have focus",
    "category": "content",
    "enabled": true
  },
  {
    "label": "prefix",
    "name": ":prefix",
    "type": "String",
    "desc": "Prefix",
    "category": "content",
    "examples": [
      "$"
    ],
    "enabled": true
  },
  {
    "label": "suffix",
    "name": ":suffix",
    "type": "String",
    "desc": "Suffix",
    "category": "content",
    "examples": [
      "@gmail.com"
    ],
    "enabled": true
  },
  {
    "label": "label-color",
    "name": ":label-color",
    "type": "String",
    "desc": "Color name for the label from the Quasar Color Palette; Overrides the 'color' prop; The difference from 'color' prop is that the label will always have this color, even when field is not focused",
    "category": "style",
    "examples": [
      "primary",
      "teal-10"
    ],
    "enabled": true
  },
  {
    "label": "color",
    "name": ":color",
    "type": "String",
    "desc": "Color name for component from the Quasar Color Palette",
    "category": "style",
    "examples": [
      "primary",
      "teal-10"
    ],
    "enabled": true
  },
  {
    "label": "bg-color",
    "name": ":bg-color",
    "type": "String",
    "desc": "Color name for component from the Quasar Color Palette",
    "category": "style",
    "examples": [
      "primary",
      "teal-10"
    ],
    "enabled": true
  },
  {
    "label": "dark",
    "name": ":dark",
    "type": "Boolean",
    "desc": "Notify the component that the background is a dark color",
    "category": "style",
    "enabled": true
  },
  {
    "label": "loading",
    "name": ":loading",
    "type": "Boolean",
    "desc": "Signals the user a process is in progress by displaying a spinner; Spinner can be customized by using the 'loading' slot.",
    "category": "behavior|content",
    "enabled": true
  },
  {
    "label": "clearable",
    "name": ":clearable",
    "type": "Boolean",
    "desc": "Appends clearable icon when a value (not undefined or null) is set; When clicked, model becomes null",
    "category": "behavior|content",
    "enabled": true
  },
  {
    "label": "clear-icon",
    "name": ":clear-icon",
    "type": "String",
    "desc": "Custom icon to use for the clear button when using along with 'clearable' prop",
    "category": "content",
    "examples": [
      "close"
    ],
    "enabled": true
  },
  {
    "label": "filled",
    "name": ":filled",
    "type": "Boolean",
    "desc": "Use 'filled' design for the field",
    "category": "style",
    "enabled": true
  },
  {
    "label": "outlined",
    "name": ":outlined",
    "type": "Boolean",
    "desc": "Use 'outlined' design for the field",
    "category": "style",
    "enabled": true
  },
  {
    "label": "borderless",
    "name": ":borderless",
    "type": "Boolean",
    "desc": "Use 'borderless' design for the field",
    "category": "style",
    "enabled": true
  },
  {
    "label": "standout",
    "name": ":standout",
    "type": [
      "Boolean",
      "String"
    ],
    "desc": "Use 'standout' design for the field; Specifies classes to be applied when focused (overriding default ones)",
    "category": "style",
    "examples": [
      "standout",
      "standout=\"bg-primary text-white\""
    ],
    "enabled": true
  },
  {
    "label": "label-slot",
    "name": ":label-slot",
    "type": "Boolean",
    "desc": "Enables label slot; You need to set it to force use of the 'label' slot if the 'label' prop is not set",
    "category": "content",
    "enabled": true
  },
  {
    "label": "bottom-slots",
    "name": ":bottom-slots",
    "type": "Boolean",
    "desc": "Enables bottom slots ('error', 'hint', 'counter')",
    "category": "content",
    "enabled": true
  },
  {
    "label": "hide-bottom-space",
    "name": ":hide-bottom-space",
    "type": "Boolean",
    "desc": "Do not reserve space for hint/error/counter anymore when these are not used; As a result, it also disables the animation for those; It also allows the hint/error area to stretch vertically based on its content",
    "category": "style",
    "enabled": true
  },
  {
    "label": "counter",
    "name": ":counter",
    "type": "Boolean",
    "desc": "Show an automatic counter on bottom right",
    "category": "content",
    "enabled": true
  },
  {
    "label": "rounded",
    "name": ":rounded",
    "type": "Boolean",
    "desc": "Applies a small standard border-radius for a squared shape of the component",
    "category": "style",
    "enabled": true
  },
  {
    "label": "square",
    "name": ":square",
    "type": "Boolean",
    "desc": "Remove border-radius so borders are squared; Overrides 'rounded' prop",
    "category": "style",
    "enabled": true
  },
  {
    "label": "dense",
    "name": ":dense",
    "type": "Boolean",
    "desc": "Dense mode; occupies less space",
    "category": "style",
    "enabled": true
  },
  {
    "label": "item-aligned",
    "name": ":item-aligned",
    "type": "Boolean",
    "desc": "Match inner content alignment to that of QItem",
    "category": "style",
    "enabled": true
  },
  {
    "label": "disable",
    "name": ":disable",
    "type": "Boolean",
    "desc": "Put component in disabled mode",
    "category": "state",
    "enabled": true
  },
  {
    "label": "readonly",
    "name": ":readonly",
    "type": "Boolean",
    "desc": "Put component in readonly mode",
    "category": "state",
    "enabled": true
  },
  {
    "label": "autofocus",
    "name": ":autofocus",
    "type": "Boolean",
    "desc": "Focus field on initial component render",
    "category": "behavior",
    "enabled": true
  },
  {
    "label": "for",
    "name": ":for",
    "type": "String",
    "desc": "Used to specify the 'id' of the control and also the 'for' attribute of the label that wraps it; If no 'name' prop is specified, then it is used for this attribute as well",
    "category": "behavior",
    "examples": [
      "myFieldsId"
    ],
    "enabled": true
  },
  {
    "label": "multiple",
    "name": ":multiple",
    "type": "Boolean",
    "desc": "Allow multiple selection; Model must be Array",
    "category": "model|selection",
    "enabled": true
  },
  {
    "label": "display-value",
    "name": ":display-value",
    "type": [
      "Number",
      "String"
    ],
    "desc": "Override default selection string, if not using 'selected' slot/scoped slot and if not using 'use-chips' prop",
    "category": "selection",
    "examples": [
      "Options: x, y, z"
    ],
    "enabled": true
  },
  {
    "label": "display-value-html",
    "name": ":display-value-html",
    "type": "Boolean",
    "desc": "Force render the selected option(s) as HTML; This can lead to XSS attacks so make sure that you sanitize the content; Does NOT apply when using 'selected' or 'selected-item' slots!",
    "category": "selection",
    "enabled": true
  },
  {
    "label": "options",
    "name": ":options",
    "type": "Array",
    "desc": "Available options that the user can select from. For best performance freeze the list of options.",
    "category": "options",
    "examples": [
      ":options=\"[ 'BMW', 'Samsung Phone' ]\"",
      ":options=\"[ { label: 'BMW', value: 'car' }, { label: 'Samsung Phone', value: 'phone' } ]\""
    ],
    "enabled": true
  },
  {
    "label": "option-value",
    "name": ":option-value",
    "type": [
      "Function",
      "String"
    ],
    "desc": "Property of option which holds the 'value'; If using a function then for best performance, reference it from your scope and do not define it inline",
    "category": "options",
    "examples": [
      "option-value=\"modelNumber\"",
      ":option-value=\"(item) => item === null ? null : item.modelNumber\""
    ],
    "enabled": true
  },
  {
    "label": "option-label",
    "name": ":option-label",
    "type": [
      "Function",
      "String"
    ],
    "desc": "Property of option which holds the 'label'; If using a function then for best performance, reference it from your scope and do not define it inline",
    "category": "options",
    "examples": [
      "option-label=\"itemName\"",
      ":option-label=\"(item) => item === null ? 'Null value' : item.itemName\""
    ],
    "enabled": true
  },
  {
    "label": "option-disable",
    "name": ":option-disable",
    "type": [
      "Function",
      "String"
    ],
    "desc": "Property of option which tells it's disabled; The value of the property must be a Boolean; If using a function then for best performance, reference it from your scope and do not define it inline",
    "category": "options",
    "examples": [
      "option-disable=\"cannotSelect\"",
      ":option-disable=\"(item) => item === null ? true : item.cannotSelect\""
    ],
    "enabled": true
  },
  {
    "label": "hide-selected",
    "name": ":hide-selected",
    "type": "Boolean",
    "desc": "Hides selection; Use the underlying input tag to hold the label (instead of showing it to the right of the input) of the selected option; Only works for non 'multiple' Selects",
    "category": "selection",
    "enabled": true
  },
  {
    "label": "hide-dropdown-icon",
    "name": ":hide-dropdown-icon",
    "type": "Boolean",
    "desc": "Hides dropdown icon",
    "category": "content|behavior",
    "enabled": true
  },
  {
    "label": "dropdown-icon",
    "name": ":dropdown-icon",
    "type": "String",
    "desc": "Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix; If 'none' (String) is used as value then no icon is rendered (but screen real estate will still be used for it)",
    "category": "content",
    "examples": [
      "map",
      "ion-add",
      "img:https://cdn.quasar.dev/logo-v2/svg/logo.svg",
      "img:path/to/some_image.png"
    ],
    "enabled": true
  },
  {
    "label": "max-values",
    "name": ":max-values",
    "type": [
      "Number",
      "String"
    ],
    "desc": "Allow a maximum number of selections that the user can do",
    "category": "selection",
    "examples": [
      "5"
    ],
    "enabled": true
  },
  {
    "label": "options-dense",
    "name": ":options-dense",
    "type": "Boolean",
    "desc": "Dense mode for options list; occupies less space",
    "category": "options",
    "enabled": true
  },
  {
    "label": "options-dark",
    "name": ":options-dark",
    "type": "Boolean",
    "desc": "Options menu will be colored with a dark color",
    "category": "options",
    "enabled": true
  },
  {
    "label": "options-selected-class",
    "name": ":options-selected-class",
    "type": "String",
    "desc": "CSS class name for options that are active/selected; Set it to an empty string to stop applying the default (which is text-* where * is the 'color' prop value)",
    "category": "options",
    "examples": [
      "text-orange"
    ],
    "enabled": true
  },
  {
    "label": "options-html",
    "name": ":options-html",
    "type": "Boolean",
    "desc": "Force render the options as HTML; This can lead to XSS attacks so make sure that you sanitize the content; Does NOT apply when using 'option' slot!",
    "category": "options",
    "enabled": true
  },
  {
    "label": "options-cover",
    "name": ":options-cover",
    "type": "Boolean",
    "desc": "Expanded menu will cover the component (will not work along with 'use-input' prop for obvious reasons)",
    "category": "options",
    "enabled": true
  },
  {
    "label": "menu-shrink",
    "name": ":menu-shrink",
    "type": "Boolean",
    "desc": "Allow the options list to be narrower than the field (only in menu mode)",
    "category": "options",
    "enabled": true
  },
  {
    "label": "menu-anchor",
    "name": ":menu-anchor",
    "type": "String",
    "desc": "Two values setting the starting position or anchor point of the options list relative to the field (only in menu mode)",
    "category": "position",
    "examples": [
      "top left",
      "bottom right"
    ],
    "enabled": true
  },
  {
    "label": "menu-self",
    "name": ":menu-self",
    "type": "String",
    "desc": "Two values setting the options list's own position relative to its target (only in menu mode)",
    "category": "position",
    "examples": [
      "top left",
      "bottom right"
    ],
    "enabled": true
  },
  {
    "label": "menu-offset",
    "name": ":menu-offset",
    "type": "Array",
    "desc": "An array of two numbers to offset the options list horizontally and vertically in pixels (only in menu mode)",
    "category": "position",
    "examples": [
      "[8, 8]",
      "[5, 10]"
    ],
    "enabled": true
  },
  {
    "label": "popup-content-class",
    "name": ":popup-content-class",
    "type": "String",
    "desc": "Class definitions to be attributed to the popup content",
    "category": "style",
    "examples": [
      "my-special-class"
    ],
    "enabled": true
  },
  {
    "label": "popup-content-style",
    "name": ":popup-content-style",
    "type": [
      "String",
      "Array",
      "Object"
    ],
    "desc": "Style definitions to be attributed to the popup content",
    "category": "style",
    "examples": [
      "background-color: #ff0000",
      ":popup-content-style=\"{ backgroundColor: '#ff0000' }\""
    ],
    "enabled": true
  },
  {
    "label": "use-input",
    "name": ":use-input",
    "type": "Boolean",
    "desc": "Use an input tag where users can type",
    "category": "content",
    "enabled": true
  },
  {
    "label": "use-chips",
    "name": ":use-chips",
    "type": "Boolean",
    "desc": "Use QChip to show what is currently selected",
    "category": "selection",
    "enabled": true
  },
  {
    "label": "fill-input",
    "name": ":fill-input",
    "type": "Boolean",
    "desc": "Fills the input with current value; Useful along with 'hide-selected'; Does NOT works along with 'multiple' selection",
    "category": "behavior",
    "enabled": true
  },
  {
    "label": "new-value-mode",
    "name": ":new-value-mode",
    "type": "String",
    "desc": "Enables creation of new values and defines behavior when a new value is added: 'add' means it adds the value (even if possible duplicate), 'add-unique' adds only unique values, and 'toggle' adds or removes the value (based on if it exists or not already); When using this prop then listening for @new-value becomes optional (only to override the behavior defined by 'new-value-mode')",
    "category": "behavior",
    "enabled": true
  },
  {
    "label": "map-options",
    "name": ":map-options",
    "type": "Boolean",
    "desc": "Try to map labels of model from 'options' Array; has a small performance penalty; If you are using emit-value you will probably need to use map-options to display the label text in the select field rather than the value;  Refer to the 'Affecting model' section above",
    "category": "options",
    "enabled": true
  },
  {
    "label": "emit-value",
    "name": ":emit-value",
    "type": "Boolean",
    "desc": "Update model with the value of the selected option instead of the whole option",
    "category": "model",
    "enabled": true
  },
  {
    "label": "input-debounce",
    "name": ":input-debounce",
    "type": [
      "Number",
      "String"
    ],
    "desc": "Debounce the input model update with an amount of milliseconds",
    "category": "content",
    "examples": [
      650
    ],
    "enabled": true
  },
  {
    "label": "input-class",
    "name": ":input-class",
    "type": [
      "String",
      "Array",
      "Object"
    ],
    "desc": "Class definitions to be attributed to the underlying input tag",
    "category": "style",
    "examples": [
      "my-special-class",
      ":input-class=\"{ 'my-special-class': <condition> }\""
    ],
    "enabled": true
  },
  {
    "label": "input-style",
    "name": ":input-style",
    "type": [
      "String",
      "Array",
      "Object"
    ],
    "desc": "Style definitions to be attributed to the underlying input tag",
    "category": "style",
    "examples": [
      "background-color: #ff0000",
      ":input-style=\"{ backgroundColor: '#ff0000' }\""
    ],
    "enabled": true
  },
  {
    "label": "tabindex",
    "name": ":tabindex",
    "type": [
      "Number",
      "String"
    ],
    "desc": "Tabindex HTML attribute value",
    "category": "general",
    "examples": [
      "0",
      "100"
    ],
    "enabled": true
  },
  {
    "label": "autocomplete",
    "name": ":autocomplete",
    "type": "String",
    "desc": "Autocomplete attribute for field",
    "category": "behavior",
    "examples": [
      "autocomplete=\"country\""
    ],
    "enabled": true
  },
  {
    "label": "transition-show",
    "name": ":transition-show",
    "type": "String",
    "desc": "Transition when showing the menu/dialog; One of Quasar's embedded transitions",
    "category": "behavior",
    "examples": [
      "fade",
      "slide-down"
    ],
    "enabled": true
  },
  {
    "label": "transition-hide",
    "name": ":transition-hide",
    "type": "String",
    "desc": "Transition when hiding the menu/dialog; One of Quasar's embedded transitions",
    "category": "behavior",
    "examples": [
      "fade",
      "slide-down"
    ],
    "enabled": true
  },
  {
    "label": "transition-duration",
    "name": ":transition-duration",
    "type": [
      "String",
      "Number"
    ],
    "desc": "Transition duration when hiding the menu/dialog (in milliseconds, without unit)",
    "category": "behavior",
    "examples": [
      500,
      "1200"
    ],
    "enabled": true
  },
  {
    "label": "behavior",
    "name": ":behavior",
    "type": "String",
    "desc": "Overrides the default dynamic mode of showing as menu on desktop and dialog on mobiles",
    "category": "behavior",
    "enabled": true
  }
]
}