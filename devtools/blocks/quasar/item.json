{
    "type": "item", 
    "label": "Item", 
    "tagName": "Q-ITEM", 
    "category": "Lists", 
    "content": "<q-item />", 
    "media": "images/icons/components/ui_components/item.png", 
    "traits": [
  {
    "label": "Reactive Model",
    "name": "v-model",
    "type": "select",
    "options": []
  },
  {
    "label": "to",
    "name": ":to",
    "type": [
      "String",
      "Object"
    ],
    "desc": "Equivalent to Vue Router <router-link> 'to' property; Superseded by 'href' prop if used",
    "category": "navigation",
    "examples": [
      "/home/dashboard",
      ":to=\"{ name: 'my-route-name' }\""
    ],
    "enabled": true
  },
  {
    "label": "exact",
    "name": ":exact",
    "type": "Boolean",
    "desc": "Equivalent to Vue Router <router-link> 'exact' property; Superseded by 'href' prop if used",
    "category": "navigation",
    "enabled": true
  },
  {
    "label": "replace",
    "name": ":replace",
    "type": "Boolean",
    "desc": "Equivalent to Vue Router <router-link> 'replace' property; Superseded by 'href' prop if used",
    "category": "navigation",
    "enabled": true
  },
  {
    "label": "active-class",
    "name": ":active-class",
    "type": "String",
    "desc": "Equivalent to Vue Router <router-link> 'active-class' property; Superseded by 'href' prop if used",
    "category": "navigation",
    "examples": [
      "my-active-class"
    ],
    "enabled": true
  },
  {
    "label": "exact-active-class",
    "name": ":exact-active-class",
    "type": "String",
    "desc": "Equivalent to Vue Router <router-link> 'active-class' property; Superseded by 'href' prop if used",
    "category": "navigation",
    "examples": [
      "my-exact-active-class"
    ],
    "enabled": true
  },
  {
    "label": "href",
    "name": ":href",
    "type": "String",
    "desc": "Native <a> link href attribute; Has priority over the 'to'/'exact'/'replace'/'active-class'/'exact-active-class' props",
    "category": "navigation",
    "examples": [
      "https://quasar.dev"
    ],
    "enabled": true
  },
  {
    "label": "target",
    "name": ":target",
    "type": "String",
    "desc": "Native <a> link target attribute; Use it only along with 'href' prop; Has priority over the 'to'/'exact'/'replace'/'active-class'/'exact-active-class' props",
    "category": "navigation",
    "examples": [
      "_blank",
      "_self",
      "_parent",
      "_top"
    ],
    "enabled": true
  },
  {
    "label": "disable",
    "name": ":disable",
    "type": "Boolean",
    "desc": "Put component in disabled mode",
    "category": "state",
    "enabled": true
  },
  {
    "label": "active",
    "name": ":active",
    "type": "Boolean",
    "desc": "Put item into 'active' state",
    "category": "state",
    "enabled": true
  },
  {
    "label": "dark",
    "name": ":dark",
    "type": "Boolean",
    "desc": "Notify the component that the background is a dark color",
    "category": "style",
    "enabled": true
  },
  {
    "label": "clickable",
    "name": ":clickable",
    "type": "Boolean",
    "desc": "Is QItem clickable? If it's the case, then it will add hover effects and emit 'click' events",
    "category": "state",
    "enabled": true
  },
  {
    "label": "dense",
    "name": ":dense",
    "type": "Boolean",
    "desc": "Dense mode; occupies less space",
    "category": "style",
    "enabled": true
  },
  {
    "label": "inset-level",
    "name": ":inset-level",
    "type": "Number",
    "desc": "Apply an inset; Useful when avatar/left side is missing but you want to align content with other items that do have a left side, or when you're building a menu",
    "category": "content",
    "examples": [
      ":inset-level=\"1\""
    ],
    "enabled": true
  },
  {
    "label": "tabindex",
    "name": ":tabindex",
    "type": [
      "Number",
      "String"
    ],
    "desc": "Tabindex HTML attribute value",
    "category": "general",
    "examples": [
      "0",
      "100"
    ],
    "enabled": true
  },
  {
    "label": "tag",
    "name": ":tag",
    "type": "String",
    "desc": "HTML tag to render; Suggestion: use 'label' when encapsulating a QCheckbox/QRadio/QToggle so that when user clicks/taps on the whole item it will trigger a model change for the mentioned components",
    "category": "content",
    "examples": [
      "div",
      "span",
      "a",
      "label",
      "div"
    ],
    "enabled": true
  },
  {
    "label": "manual-focus",
    "name": ":manual-focus",
    "type": "Boolean",
    "desc": "Put item into a manual focus state; Enables 'focused' prop which will determine if item is focused or not, rather than relying on native hover/focus states",
    "category": "state",
    "enabled": true
  },
  {
    "label": "focused",
    "name": ":focused",
    "type": "Boolean",
    "desc": "Determines focus state, ONLY if 'manual-focus' is enabled / set to true",
    "category": "state",
    "enabled": true
  }
]
}