module Generators

using Genie

const model_name = "AppModel"

function mvcfolders()
  isdir(Genie.config.path_initializers) || mkpath(Genie.config.path_initializers)
  isdir(Genie.config.path_plugins) || mkdir(Genie.config.path_plugins)
  isdir("controllers") || mkdir("controllers")
  isdir("layouts") || mkdir("layouts")
  isdir("models") || mkdir("models")
  isdir("views") || mkdir("views")
end

function logging()
  mvcfolders()
  isfile(joinpath(Genie.config.path_initializers, "logging.jl")) && return
  open(joinpath(Genie.config.path_initializers, "logging.jl"), "w") do io
    write(io,
    """
    import Genie
    Genie.Logger.initialize_logging()
    """
    )
  end
end

function autoload()
  mvcfolders()
  isfile(joinpath(Genie.config.path_initializers, "autoload.jl")) && return
  open(joinpath(Genie.config.path_initializers, "autoload.jl"), "w") do io
    write(io,
    """
    # Optional flat/non-resource MVC folder structure
    Genie.Loader.autoload(abspath("models"), abspath("controllers"))
    """
    )
  end
end

function layout()
  isfile(joinpath("layouts", "app.jl.html")) && return

  open(joinpath("layouts", "app.jl.html"), "w") do io
    write(io,
    """
    <!DOCTYPE html>
    <html>
      <head>
        <meta charset="utf-8">
        <% Stipple.sesstoken() %>
        <title>Hello Genie</title>
        <% Genie.Assets.favicon_support() %>
        <link rel="stylesheet" href="/css/autogenerated.css">
        <link rel="stylesheet" href="/css/app.css">
      </head>
      <body>
        <% page(model, partial = true, [@yield]) %>
        <script src="/js/app.js"></script>
      </body>
    </html>
    """
    )
  end
end

function model()
  isfile(joinpath("models", "$(model_name)s.jl")) && return

  open(joinpath("models", "$(model_name)s.jl"), "w") do io
    write(io,
    """
    module $(model_name)s

    using Stipple

    export $(model_name)

    @reactive mutable struct $(model_name) <: ReactiveModel
      message::R{String} = "Hello World!"
    end

    function handlers(model::$(model_name)) :: $(model_name)
      #=
      on(model.message) do message
        model.isprocessing = true
        model.message[] = "Hello to you too!"
        model.isprocessing = false
      end
      =#

      model
    end

    end
    """
    )
  end
end

function assets()
  isdir(Genie.config.server_document_root) || mkdir(Genie.config.server_document_root)

  if ! isfile(joinpath(Genie.config.server_document_root, "css", "app.css"))
    open(joinpath(Genie.config.server_document_root, "css", "app.css"), "w") do io
      write(io,
      """
      /* place your custom css here */
      """
      )
    end
  end

  if ! isfile(joinpath(Genie.config.server_document_root, "css", "autogenerated.css"))
    open(joinpath(Genie.config.server_document_root, "css", "autogenerated.css"), "w") do io
      write(io,
      """
      /* WARNING!!! */
      /* This CSS file is generated by GenieBuilder. */
      /* Do not edit this file directly or you'll lose all your changes. */
      """
      )
    end
  end

  if ! isfile(joinpath(Genie.config.server_document_root, "js","app.js"))
    open(joinpath(Genie.config.server_document_root, "js", "app.js"), "w") do io
      write(io,
      """
      /* place your custom js here */
      """
      )
    end
  end
end

function view()
  isfile("app.jl.html") && return

  open("app.jl.html", "w") do io
    write(io,
    """
    <h1>{{message}}</h1>
    <p>This is the default view for the application.</p>
    <p>You can change this view by editing the file <code>app.jl.html</code>.</p>
    """
    )
  end
end

function app()
  isfile("app.jl") && return

  open("app.jl", "w") do io
    write(io,
    """
    module App

    using GenieFramework
    @genietools

    @handlers begin
      @out message = "Hello World!"

      @onchange isready begin
        @show "App is loaded"
      end
    end

    @page("/", "app.jl.html")

    end
    """
    )
  end
end

end